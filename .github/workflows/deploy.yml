name: "Terraform"

on:
  push:
    branches: ["main"]

permissions:
  contents: read

env:
  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
  TF_VAR_site_domain: ${{ secrets.SITE_DOMAIN }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Project
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: lts/*
      - run: npm install
      - run: npm run build --if-present

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./terraform
        run: >
          terraform init
          -backend-config="bucket=${{ vars.TFM_S3_BKT }}"
          -backend-config="key=${{ vars.TFM_S3_PATH }}"
          -backend-config="region=${{ vars.TFM_S3_REGION }}"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
